package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"TestGoLandProject/graph/model"
	"context"
	"fmt"
)

// CreatePostCommentComplaint is the resolver for the createPostCommentComplaint field.
func (r *mutationResolver) CreatePostCommentComplaint(ctx context.Context, postCommentIDHolder model.IDHolder, newComplaint model.NewPostCommentComplaint) (*model.PostCommentComplaint, error) {
	panic(fmt.Errorf("not implemented: CreatePostCommentComplaint - createPostCommentComplaint"))
}

// DeletePostCommentComplaint is the resolver for the deletePostCommentComplaint field.
func (r *mutationResolver) DeletePostCommentComplaint(ctx context.Context, complaintIDHolder model.IDHolder) (*model.DeleteResult, error) {
	panic(fmt.Errorf("not implemented: DeletePostCommentComplaint - deletePostCommentComplaint"))
}

// GetMyActivePostCommentComplaints is the resolver for the getMyActivePostCommentComplaints field.
func (r *queryResolver) GetMyActivePostCommentComplaints(ctx context.Context) ([]*model.PostCommentComplaint, error) {
	panic(fmt.Errorf("not implemented: GetMyActivePostCommentComplaints - getMyActivePostCommentComplaints"))
}

// GetMyClosedPostCommentComplaints is the resolver for the getMyClosedPostCommentComplaints field.
func (r *queryResolver) GetMyClosedPostCommentComplaints(ctx context.Context) ([]*model.PostCommentComplaint, error) {
	panic(fmt.Errorf("not implemented: GetMyClosedPostCommentComplaints - getMyClosedPostCommentComplaints"))
}

// GetMyRefusedPostCommentComplaints is the resolver for the getMyRefusedPostCommentComplaints field.
func (r *queryResolver) GetMyRefusedPostCommentComplaints(ctx context.Context) ([]*model.PostCommentComplaint, error) {
	panic(fmt.Errorf("not implemented: GetMyRefusedPostCommentComplaints - getMyRefusedPostCommentComplaints"))
}
