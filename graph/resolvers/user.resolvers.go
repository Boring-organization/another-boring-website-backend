package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"TestGoLandProject/core/auth"
	"TestGoLandProject/core/utils"
	"TestGoLandProject/graph"
	"TestGoLandProject/graph/model"
	resolverUtils "TestGoLandProject/graph/resolvers/utils"
	"context"
	"net/http"
	"time"

	"github.com/google/uuid"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUser) (*model.NewUser, error) {
	id := uuid.New()

	newUser := model.NewUser{
		ID:       id.String(),
		Nickname: input.Nickname,
		Login:    input.Login,
		Password: input.Password,
		Token:    "",
	}

	tokenLiveTime := time.Hour * 24 * 30
	jwtToken, err := auth.GenerateJwt(id.String(), tokenLiveTime)

	if err != nil {
		return nil, err
	}

	r.Database.ExecuteOperation("insert into User (id, nickname, login, password, created_at) values ($1, $2, $3, $4, $5)", newUser.ID, newUser.Nickname, newUser.Login, newUser.Password, time.Now().UnixMilli())
	r.Database.ExecuteOperation("insert into Auth_data (token, user_id, device_name, used_at, expired_at) values ($1, $2, $3, $4, $5)", jwtToken, id.String(), input.DeviceName, time.Now().UnixMilli(), time.Now().Add(tokenLiveTime).UnixMilli())

	newUser.Token = jwtToken

	return &newUser, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, input model.UpdateUser) (*model.User, error) {
	user := model.User{}

	userRow := r.Database.QueryRow("select * from User where id = $1", input.ID)
	err := userRow.Scan(&user.ID, &user.Nickname, &user.Login, &user.Password)

	if err != nil {
		return nil, err
	}

	user = model.User{ID: input.ID, Nickname: input.Nickname, Login: input.Login, Password: input.Password}
	r.Database.ExecuteOperation("update User set nickname = $1, login = $2, password = $3 where id = $4;", user.Nickname, user.Login, user.Password, user.ID)

	return &user, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, input model.UserID) (bool, error) {
	user := model.User{}

	userRow := r.Database.QueryRow("select * from User where id = $1", input.ID)
	err := userRow.Scan(&user.ID, &user.Nickname, &user.Login, &user.Password)

	if err != nil {
		return false, err
	}

	r.Database.ExecuteOperation("delete from User where id = $1", input.ID)
	return true, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	users := []*model.User{}
	dbUsers := r.Database.Query("select * from User")

	for dbUsers.Next() {
		user := model.User{}
		err := dbUsers.Scan(&user.ID, &user.Nickname, &user.Login, &user.Password)

		if err != nil {
			return nil, err
		}

		users = append(users, &user)
	}

	return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, input model.UserID) (*model.User, error) {
	user := model.User{}

	userRow := r.Database.QueryRow("select * from User where id = $1", input.ID)
	err := userRow.Scan(&user.ID, &user.Nickname, &user.Login, &user.Password)

	if err != nil {
		return nil, err
	}

	return &user, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	ginContext, err := utils.GinContextFromContext(ctx)
	if err != nil {
		return nil, utils.ResponseError(ginContext, http.StatusInternalServerError, "Can't get gin context")
	}

	userId, err := resolverUtils.GetUserIdFromContext(ctx, *r.Database)
	if err != nil {
		return nil, err
	}

	user := model.User{}
	userRow := r.Database.QueryRow("select * from User where id = $1", userId)

	err = userRow.Scan(&user.ID, &user.Nickname, &user.Login, &user.Password, &user.CreatedAt, &user.EditedAt, &user.DeletedAt, &user.IsAdmin)
	if err != nil {
		return nil, utils.ResponseError(ginContext, http.StatusInternalServerError, "Can't get user info from database")
	}

	return &user, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

// Query returns graph.QueryResolver implementation.
func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
