package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"TestGoLandProject/core/auth"
	commonUtils "TestGoLandProject/core/utils/common"
	databaseUtils "TestGoLandProject/core/utils/database_utils"
	resolverUtils "TestGoLandProject/core/utils/resolver"
	"TestGoLandProject/graph/model"
	"context"
	"fmt"
	sq "github.com/Masterminds/squirrel"
	"github.com/google/uuid"
	"net/http"
	"time"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, newUserData model.CreateUser) (*model.User, error) {
	ginContext, err := commonUtils.GinContextFromContext(ctx)
	if err != nil {
		return nil, commonUtils.ResponseError(ginContext, http.StatusInternalServerError, fmt.Errorf("can't get gin context: %w", err))
	}

	id := uuid.New()
	timeNow := int(time.Now().UnixMilli())

	user := model.User{
		ID:           id.String(),
		Nickname:     newUserData.Nickname,
		Login:        newUserData.Login,
		Password:     &newUserData.Password,
		LastActionAt: timeNow,
		CreatedAt:    timeNow,
		Sex:          newUserData.Sex,
		IsAdmin:      false,
		Token:        nil,
	}

	tokenLiveTime := time.Hour * 24 * 30
	jwtToken, err := auth.GenerateJwt(id.String(), tokenLiveTime)
	if err != nil {
		return nil, commonUtils.ResponseError(ginContext, http.StatusInternalServerError, fmt.Errorf("can't generate token: %w", err))
	}

	_, err = r.db.Insert("User").Columns("id", "nickname", "login", "password", "email", "sex", "created_at", "last_action_at").Values(user.ID, newUserData.Nickname, newUserData.Login, newUserData.Password, newUserData.Email, newUserData.Sex, timeNow, timeNow).Exec()
	if err != nil {
		return nil, commonUtils.ResponseError(ginContext, http.StatusInternalServerError, fmt.Errorf("can't add new user to database: %w", err))
	}
	_, err = r.db.Insert("Auth_data").Columns("token", "user_id", "device_name", "device_id", "used_at", "expired_at").Values(jwtToken, id.String(), newUserData.DeviceName, newUserData.DeviceID, timeNow, time.Now().Add(tokenLiveTime).UnixMilli()).Exec()
	if err != nil {
		return nil, commonUtils.ResponseError(ginContext, http.StatusInternalServerError, fmt.Errorf("can't add auth data to database: %w", err))
	}

	user.Token = &jwtToken

	return &user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, newUserData model.UpdateUser) (*model.User, error) {
	ginContext, err := commonUtils.GinContextFromContext(ctx)
	if err != nil {
		return nil, commonUtils.ResponseError(ginContext, http.StatusInternalServerError, fmt.Errorf("can't get gin context: %w", err))
	}

	timeNow := int(time.Now().UnixMilli())

	_, err = r.db.Update("User").Where(sq.Eq{"id": newUserData.ID}).Set("nickname", newUserData.Nickname).Set("edited_at", timeNow).Set("last_action_at", timeNow).Exec()
	if err != nil {
		return nil, commonUtils.ResponseError(ginContext, http.StatusInternalServerError, fmt.Errorf("can't update user data in database: %w", err))
	}

	user, err := databaseUtils.GetUserFromDatabase(r.db, newUserData.ID)
	if err != nil {
		return nil, commonUtils.ResponseError(ginContext, http.StatusNotFound, fmt.Errorf("user not found: %w", err))
	}

	return user, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, userIDHolder model.IDHolder) (*model.DeleteResult, error) {
	ginContext, err := commonUtils.GinContextFromContext(ctx)
	if err != nil {
		return &model.DeleteResult{IsDeleted: false}, commonUtils.ResponseError(ginContext, http.StatusInternalServerError, fmt.Errorf("can't get gin context: %w", err))
	}

	timeNow := int(time.Now().UnixMilli())
	_, err = r.db.Update("User").Where(sq.Eq{"id": userIDHolder.ID}).Set("deleted_at", timeNow).Set("last_action_at", timeNow).Exec()
	if err != nil {
		return &model.DeleteResult{IsDeleted: false}, commonUtils.ResponseError(ginContext, http.StatusInternalServerError, fmt.Errorf("can't delete user: %w", err))
	}

	return &model.DeleteResult{IsDeleted: true}, nil
}

// FriendInviteUser is the resolver for the friendInviteUser field.
func (r *mutationResolver) FriendInviteUser(ctx context.Context, userIDHolder model.IDHolder) (bool, error) {
	ginContext, err := commonUtils.GinContextFromContext(ctx)
	if err != nil {
		return false, commonUtils.ResponseError(ginContext, http.StatusInternalServerError, fmt.Errorf("can't get gin context: %w", err))
	}

	userId, err := resolverUtils.GetUserIdFromContext(ginContext, r.db)
	if err != nil {
		return false, commonUtils.ResponseError(ginContext, http.StatusBadRequest, fmt.Errorf("can't get user id from request header: %w", err))
	}

	_, err = r.db.Insert("User_friend_link").Columns("requester_id", "requested_id").Values(*userId, userIDHolder.ID).Exec()
	if err != nil {
		return false, commonUtils.ResponseError(ginContext, http.StatusInternalServerError, fmt.Errorf("can't add friend invite: %w", err))
	}

	return true, nil
}

// ChangePassword is the resolver for the changePassword field.
func (r *mutationResolver) ChangePassword(ctx context.Context, passwordData model.NewPassword) (*model.Token, error) {
	panic(fmt.Errorf("not implemented: ChangePassword - changePassword"))
}

// ChangeEmail is the resolver for the changeEmail field.
func (r *mutationResolver) ChangeEmail(ctx context.Context, emailData model.NewEmail) (*model.Token, error) {
	panic(fmt.Errorf("not implemented: ChangeEmail - changeEmail"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	ginContext, err := commonUtils.GinContextFromContext(ctx)
	if err != nil {
		return nil, commonUtils.ResponseError(ginContext, http.StatusInternalServerError, fmt.Errorf("can't get gin context: %w", err))
	}

	userId, err := resolverUtils.GetUserIdFromContext(ginContext, r.db)
	if err != nil {
		return nil, commonUtils.ResponseError(ginContext, http.StatusBadRequest, fmt.Errorf("can't get user id from request header: %w", err))
	}

	user, err := databaseUtils.GetUserFromDatabase(r.db, *userId)
	if err != nil {
		return nil, commonUtils.ResponseError(ginContext, http.StatusInternalServerError, fmt.Errorf("can't get user info from database: %w", err))
	}

	return user, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, userIDHolder model.IDHolder) (*model.User, error) {
	ginContext, err := commonUtils.GinContextFromContext(ctx)
	if err != nil {
		return nil, commonUtils.ResponseError(ginContext, http.StatusInternalServerError, fmt.Errorf("can't get gin context: %w", err))
	}

	user, err := databaseUtils.GetUserFromDatabase(r.db, userIDHolder.ID)
	if err != nil {
		return nil, commonUtils.ResponseError(ginContext, http.StatusInternalServerError, fmt.Errorf("can't get user info from database or user not found: %w", err))
	}

	return user, nil
}

// MyFriends is the resolver for the myFriends field.
func (r *queryResolver) MyFriends(ctx context.Context, paginationSettings model.ListByTimeSortPaginationSettings) ([]*model.User, error) {
	ginContext, err := commonUtils.GinContextFromContext(ctx)
	if err != nil {
		return nil, commonUtils.ResponseError(ginContext, http.StatusInternalServerError, fmt.Errorf("can't get gin context: %w", err))
	}

	userId, err := resolverUtils.GetUserIdFromContext(ginContext, r.db)
	if err != nil {
		return nil, commonUtils.ResponseError(ginContext, http.StatusBadRequest, fmt.Errorf("can't get user id from request header: %w", err))
	}

	userFriends, err := resolverUtils.GetUserFriends(r.db, *userId, paginationSettings)
	if err != nil {
		return nil, commonUtils.ResponseError(ginContext, http.StatusBadRequest, fmt.Errorf("can't get user %s friends: %w", *userId, err))
	}

	return *userFriends, nil
}

// MyFriendRequests is the resolver for the myFriendRequests field.
func (r *queryResolver) MyFriendRequests(ctx context.Context, paginationSettings model.ListByTimeSortPaginationSettings) ([]*model.User, error) {
	ginContext, err := commonUtils.GinContextFromContext(ctx)
	if err != nil {
		return nil, commonUtils.ResponseError(ginContext, http.StatusInternalServerError, fmt.Errorf("can't get gin context: %w", err))
	}

	userId, err := resolverUtils.GetUserIdFromContext(ginContext, r.db)
	if err != nil {
		return nil, commonUtils.ResponseError(ginContext, http.StatusBadRequest, fmt.Errorf("can't get user id from request header: %w", err))
	}

	userFriendRequests, err := resolverUtils.GetUserFriendRequests(r.db, *userId, paginationSettings)
	if err != nil {
		return nil, commonUtils.ResponseError(ginContext, http.StatusBadRequest, fmt.Errorf("can't get user %s friend requests: %w", *userId, err))
	}

	return *userFriendRequests, nil
}

// MyFriendInvites is the resolver for the myFriendInvites field.
func (r *queryResolver) MyFriendInvites(ctx context.Context, paginationSettings model.ListByTimeSortPaginationSettings) ([]*model.User, error) {
	ginContext, err := commonUtils.GinContextFromContext(ctx)
	if err != nil {
		return nil, commonUtils.ResponseError(ginContext, http.StatusInternalServerError, fmt.Errorf("can't get gin context: %w", err))
	}

	userId, err := resolverUtils.GetUserIdFromContext(ginContext, r.db)
	if err != nil {
		return nil, commonUtils.ResponseError(ginContext, http.StatusBadRequest, fmt.Errorf("can't get user id from request header: %w", err))
	}

	userFriendInvites, err := resolverUtils.GetUserFriendInvites(r.db, *userId, paginationSettings)
	if err != nil {
		return nil, commonUtils.ResponseError(ginContext, http.StatusBadRequest, fmt.Errorf("can't get user %s friend invites: %w", *userId, err))
	}

	return *userFriendInvites, nil
}

// UserFriends is the resolver for the userFriends field.
func (r *queryResolver) UserFriends(ctx context.Context, userIDHolder model.IDHolder, paginationSettings model.ListByTimeSortPaginationSettings) ([]*model.User, error) {
	ginContext, err := commonUtils.GinContextFromContext(ctx)
	if err != nil {
		return nil, commonUtils.ResponseError(ginContext, http.StatusInternalServerError, fmt.Errorf("can't get gin context: %w", err))
	}

	userFriends, err := resolverUtils.GetUserFriends(r.db, userIDHolder.ID, paginationSettings)
	if err != nil {
		return nil, commonUtils.ResponseError(ginContext, http.StatusBadRequest, fmt.Errorf("can't get user %s friends: %w", userIDHolder.ID, err))
	}

	return *userFriends, nil
}
