type Token {
    token:  String!
}

type User {
    id:      String!
    nickname: String!
    login:    String!
    password: String
    email:    String!
    isAdmin: Boolean!
    description: String
    kinks: [String!]!
    sex: String!
    lastActionAt: Int64!
    createdAt: Int64!
    editedAt: Int64
    deletedAt: Int64
}

extend type User {
    token:  String
}

input CreateUser {
    nickname: String! @minLength(value: 2) @maxLength(value: 30) @notEmptyString
    login:    String! @minLength(value: 2) @maxLength(value: 100) @notEmptyString
    password: String! @minLength(value: 8) @maxLength(value: 100) @notEmptyString
    email:    String! @maxLength(value: 100) @notEmptyString @email
    deviceName: String! @maxLength(value: 1000) @notEmptyString
    deviceId: String! @maxLength(value: 1000) @notEmptyString
    sex: String! @catalogItemCode
}

input UpdateUser {
    id:      String!
    nickname: String! @minLength(value: 2) @maxLength(value: 30) @notEmptyString
    login:    String! @minLength(value: 2) @maxLength(value: 100) @notEmptyString
    email:    String! @maxLength(value: 100) @notEmptyString @email
}

input NewPassword {
    oldPassword: String! @minLength(value: 8) @maxLength(value: 100) @notEmptyString
    newPassword: String! @minLength(value: 8) @maxLength(value: 100) @notEmptyString
}

input NewEmail {
    newEmail: String! @maxLength(value: 100) @notEmptyString @email
}

extend type Mutation {
    createUser(newUserData: CreateUser!): User!
    updateUser(newUserData: UpdateUser!): User!  @authenticated
    deleteUser(userIdHolder: IdHolder! @idExistInTable(table: User)): DeleteResult! @authenticated
    friendInviteUser(userIdHolder: IdHolder! @idExistInTable(table: User)): Boolean! @authenticated
    deleteFriendInvite(userIdHolder: IdHolder! @idExistInTable(table: User)): DeleteResult! @authenticated
    changePassword(passwordData: NewPassword!): Token! @authenticated
}

extend type Query {
    me: User! @authenticated
    user(userIdHolder: IdHolder! @idExistInTable(table: User)): User! @authenticated
    myFriends(paginationSettings: ListByTimeSortPaginationSettings!): [User!]! @authenticated
    myFriendRequests(paginationSettings: ListByTimeSortPaginationSettings!): [User!]! @authenticated
    myFriendInvites(paginationSettings: ListByTimeSortPaginationSettings!): [User!]! @authenticated
    userFriends(userIdHolder: IdHolder! @idExistInTable(table: User), paginationSettings: ListByTimeSortPaginationSettings!): [User!]! @authenticated
}
