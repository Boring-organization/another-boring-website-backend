package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"TestGoLandProject/graph/model"
	"context"
	"fmt"
)

// CreateUserComplaint is the resolver for the createUserComplaint field.
func (r *mutationResolver) CreateUserComplaint(ctx context.Context, userIDHolder model.IDHolder, newComplaint model.NewUserComplaint) (*model.UserComplaint, error) {
	panic(fmt.Errorf("not implemented: CreateUserComplaint - createUserComplaint"))
}

// DeleteUserComplaint is the resolver for the deleteUserComplaint field.
func (r *mutationResolver) DeleteUserComplaint(ctx context.Context, complaintIDHolder model.IDHolder) (*model.DeleteResult, error) {
	panic(fmt.Errorf("not implemented: DeleteUserComplaint - deleteUserComplaint"))
}

// GetMyActiveUserComplaints is the resolver for the getMyActiveUserComplaints field.
func (r *queryResolver) GetMyActiveUserComplaints(ctx context.Context) ([]*model.UserComplaint, error) {
	panic(fmt.Errorf("not implemented: GetMyActiveUserComplaints - getMyActiveUserComplaints"))
}

// GetMyClosedUserComplaints is the resolver for the getMyClosedUserComplaints field.
func (r *queryResolver) GetMyClosedUserComplaints(ctx context.Context) ([]*model.UserComplaint, error) {
	panic(fmt.Errorf("not implemented: GetMyClosedUserComplaints - getMyClosedUserComplaints"))
}

// GetMyRefusedUserComplaints is the resolver for the getMyRefusedUserComplaints field.
func (r *queryResolver) GetMyRefusedUserComplaints(ctx context.Context) ([]*model.UserComplaint, error) {
	panic(fmt.Errorf("not implemented: GetMyRefusedUserComplaints - getMyRefusedUserComplaints"))
}
