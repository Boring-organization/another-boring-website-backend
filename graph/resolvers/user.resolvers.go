package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"TestGoLandProject/core/auth"
	"TestGoLandProject/core/utils"
	"TestGoLandProject/graph/model"
	resolverUtils "TestGoLandProject/graph/resolvers/utils"
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/google/uuid"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, newUser model.CreateUser) (*model.User, error) {
	ginContext, err := utils.GinContextFromContext(ctx)
	if err != nil {
		return nil, utils.ResponseError(ginContext, http.StatusInternalServerError, "Can't get gin context")
	}

	id := uuid.New()
	timeNow := int(time.Now().UnixMilli())

	newUser := model.User{
		ID:           id.String(),
		Nickname:     input.Nickname,
		Login:        input.Login,
		Password:     &input.Password,
		LastActionAt: timeNow,
		CreatedAt:    timeNow,
		IsAdmin:      false,
		Token:        nil,
	}

	tokenLiveTime := time.Hour * 24 * 30
	jwtToken, err := auth.GenerateJwt(id.String(), tokenLiveTime)
	if err != nil {
		return nil, utils.ResponseError(ginContext, http.StatusInternalServerError, "Can't generate token")
	}

	_, err = r.Database.ExecuteOperation("insert into User (id, nickname, login, password, email, created_at, last_action_at) values ($1, $2, $3, $4, $5, $6, $7)", newUser.ID, newUser.Nickname, newUser.Login, newUser.Password, newUser.Email, timeNow, timeNow)
	if err != nil {
		return nil, utils.ResponseError(ginContext, http.StatusInternalServerError, "Can't add new user to database")
	}

	_, err = r.Database.ExecuteOperation("insert into Auth_data (token, user_id, device_name, used_at, expired_at) values ($1, $2, $3, $4, $5)", jwtToken, id.String(), input.DeviceName, timeNow, time.Now().Add(tokenLiveTime).UnixMilli())
	if err != nil {
		return nil, utils.ResponseError(ginContext, http.StatusInternalServerError, "Can't add auth data to database")
	}

	newUser.Token = &jwtToken

	return &newUser, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, newUserData model.UpdateUser) (*model.User, error) {
	ginContext, err := utils.GinContextFromContext(ctx)
	if err != nil {
		return nil, utils.ResponseError(ginContext, http.StatusInternalServerError, "Can't get gin context")
	}

	user := model.User{}

	userRow := r.Database.QueryRow("select * from User where id = $1", input.ID)
	err = userRow.Scan(&user.ID, &user.Nickname, &user.Login, &user.Password, &user.CreatedAt, &user.IsAdmin, &user.DeletedAt)

	if err != nil {
		return nil, utils.ResponseError(ginContext, http.StatusNotFound, "User not found")
	}

	timeNow := int(time.Now().UnixMilli())
	user = model.User{ID: input.ID, Nickname: input.Nickname, Login: input.Login, LastActionAt: timeNow, EditedAt: &timeNow}
	_, err = r.Database.ExecuteOperation("update User set nickname = $1, login = $2, password = $3, edited_at = $4, last_action_at = $5 where id = $6;", user.Nickname, user.Login, user.Password, user.EditedAt, user.LastActionAt, user.ID)
	if err != nil {
		return nil, utils.ResponseError(ginContext, http.StatusInternalServerError, "Can't update user data in database")
	}

	return &user, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, userIDHolder model.IDHolder) (*model.DeleteResult, error) {
	ginContext, err := utils.GinContextFromContext(ctx)
	if err != nil {
		return false, utils.ResponseError(ginContext, http.StatusInternalServerError, "Can't get gin context")
	}

	user := model.User{}

	userRow := r.Database.QueryRow("select * from User where id = $1", input.ID)
	err = userRow.Scan(&user.ID, &user.Nickname, &user.Login, &user.Password)

	if err != nil {
		return false, utils.ResponseError(ginContext, http.StatusNotFound, "User not found")
	}

	timeNow := int(time.Now().UnixMilli())
	_, err = r.Database.ExecuteOperation("update User set deleted_at = $1, last_action_at = $2 where id = $3", timeNow, timeNow, input.ID)
	if err != nil {
		return false, utils.ResponseError(ginContext, http.StatusInternalServerError, "Can't delete user")
	}

	return true, nil
}

// FriendInviteUser is the resolver for the friendInviteUser field.
func (r *mutationResolver) FriendInviteUser(ctx context.Context, userIDHolder model.IDHolder) (bool, error) {
	ginContext, err := utils.GinContextFromContext(ctx)
	if err != nil {
		return false, utils.ResponseError(ginContext, http.StatusInternalServerError, "Can't get gin context")
	}

	userId, err := resolverUtils.GetUserIdFromContext(ctx, *r.Database)
	if err != nil {
		return false, err
	}

	_, err = r.Database.ExecuteOperation("insert into User_friend_link (requester_id, requested_id) values ($1, $2)", *userId, input.ID)
	if err != nil {
		return false, utils.ResponseError(ginContext, http.StatusInternalServerError, "Can't add friend invite")
	}

	return true, nil
}

// ChangePassword is the resolver for the changePassword field.
func (r *mutationResolver) ChangePassword(ctx context.Context, passwordData model.NewPassword) (*model.Token, error) {
	panic(fmt.Errorf("not implemented: ChangePassword - changePassword"))
}

// ChangeEmail is the resolver for the changeEmail field.
func (r *mutationResolver) ChangeEmail(ctx context.Context, emailData model.NewEmail) (*model.Token, error) {
	panic(fmt.Errorf("not implemented: ChangeEmail - changeEmail"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	ginContext, err := utils.GinContextFromContext(ctx)
	if err != nil {
		return nil, utils.ResponseError(ginContext, http.StatusInternalServerError, "Can't get gin context")
	}

	userId, err := resolverUtils.GetUserIdFromContext(ctx, *r.Database)
	if err != nil {
		return nil, err
	}

	user := model.User{}
	err = resolverUtils.GetUserFromDatabase(*r.Database, &user, *userId)
	if err != nil {
		return nil, utils.ResponseError(ginContext, http.StatusInternalServerError, "Can't get user info from database")
	}

	return &user, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, userIDHolder model.IDHolder) (*model.User, error) {
	ginContext, err := utils.GinContextFromContext(ctx)
	if err != nil {
		return nil, utils.ResponseError(ginContext, http.StatusInternalServerError, "Can't get gin context")
	}

	user := model.User{}
	err = resolverUtils.GetUserFromDatabase(*r.Database, &user, input.ID)
	if err != nil {
		return nil, utils.ResponseError(ginContext, http.StatusInternalServerError, "Can't get user info from database or user not found")
	}

	return &user, nil
}

// MyFriends is the resolver for the myFriends field.
func (r *queryResolver) MyFriends(ctx context.Context) ([]*model.User, error) {
	ginContext, err := utils.GinContextFromContext(ctx)
	if err != nil {
		return nil, utils.ResponseError(ginContext, http.StatusInternalServerError, "Can't get gin context")
	}

	userId, err := resolverUtils.GetUserIdFromContext(ctx, *r.Database)
	if err != nil {
		return nil, err
	}

	return resolverUtils.GetUserFriends(ctx, *userId, *r.Database)
}

// MyFriendRequests is the resolver for the myFriendRequests field.
func (r *queryResolver) MyFriendRequests(ctx context.Context) ([]*model.User, error) {
	ginContext, err := utils.GinContextFromContext(ctx)
	if err != nil {
		return nil, utils.ResponseError(ginContext, http.StatusInternalServerError, "Can't get gin context")
	}

	userId, err := resolverUtils.GetUserIdFromContext(ctx, *r.Database)
	if err != nil {
		return nil, err
	}

	return resolverUtils.GetUserFriendRequests(ctx, *userId, *r.Database)
}

// MyFriendInvites is the resolver for the myFriendInvites field.
func (r *queryResolver) MyFriendInvites(ctx context.Context) ([]*model.User, error) {
	ginContext, err := utils.GinContextFromContext(ctx)
	if err != nil {
		return nil, utils.ResponseError(ginContext, http.StatusInternalServerError, "Can't get gin context")
	}

	userId, err := resolverUtils.GetUserIdFromContext(ctx, *r.Database)
	if err != nil {
		return nil, err
	}

	return resolverUtils.GetUserFriendInvites(ctx, *userId, *r.Database)
}

// UserFriends is the resolver for the userFriends field.
func (r *queryResolver) UserFriends(ctx context.Context, userIDHolder model.IDHolder) ([]*model.User, error) {
	ginContext, err := utils.GinContextFromContext(ctx)
	if err != nil {
		return nil, utils.ResponseError(ginContext, http.StatusInternalServerError, "Can't get gin context")
	}

	return resolverUtils.GetUserFriends(ctx, input.ID, *r.Database)
}
