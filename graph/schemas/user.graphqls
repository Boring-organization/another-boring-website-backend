type Token {
    token:  String!
}

type User {
    id:      String!
    nickname: String!
    login:    String!
    password: String
    email:    String!
    lastActionAt: Int64!
    createdAt: Int64!
    editedAt: Int64
    deletedAt: Int64
    isAdmin: Boolean!
    description: String
    kinks: [String!]!
}

extend type User {
    token:  String
}

input CreateUser {
    nickname: String! @minLength(value: 2) @maxLength(value: 30) @notEmptyString(state: true)
    login:    String! @minLength(value: 2) @maxLength(value: 100) @notEmptyString(state: true)
    password: String! @minLength(value: 8) @maxLength(value: 100) @notEmptyString(state: true)
    email:    String! @maxLength(value: 100) @notEmptyString(state: true) @email(state: true)
    deviceName: String! @maxLength(value: 1000) @notEmptyString(state: true)
}

input UpdateUser {
    id:      String!
    nickname: String! @minLength(value: 2) @maxLength(value: 30) @notEmptyString(state: true)
    login:    String! @minLength(value: 2) @maxLength(value: 100) @notEmptyString(state: true)
    email:    String! @maxLength(value: 100) @notEmptyString(state: true) @email(state: true)
}

input NewPassword {
    oldPassword: String! @minLength(value: 8) @maxLength(value: 100) @notEmptyString(state: true)
    newPassword: String! @minLength(value: 8) @maxLength(value: 100) @notEmptyString(state: true)
}

input NewEmail {
    oldEmail: String! @maxLength(value: 100) @notEmptyString(state: true) @email(state: true)
    newEmail: String! @maxLength(value: 100) @notEmptyString(state: true) @email(state: true)
}

extend type Mutation {
    createUser(newUser: CreateUser!): User!
    updateUser(newUserData: UpdateUser!): User!  @authenticated(state: true)
    deleteUser(userIdHolder: IdHolder!): DeleteResult! @authenticated(state: true)
    friendInviteUser(userIdHolder: IdHolder!): Boolean! @authenticated(state: true)
    changePassword(passwordData: NewPassword!): Token! @authenticated(state: true)
    changeEmail(emailData: NewEmail!): Token! @authenticated(state: true)
}

extend type Query {
    me: User! @authenticated(state: true)
    user(userIdHolder: IdHolder!): User! @authenticated(state: true)
    myFriends: [User!]! @authenticated(state: true)
    myFriendRequests: [User!]! @authenticated(state: true)
    myFriendInvites: [User!]! @authenticated(state: true)
    userFriends(userIdHolder: IdHolder!): [User!]! @authenticated(state: true)
}
